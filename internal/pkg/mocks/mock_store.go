// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/store/store.go
//
// Generated by this command:
//
//	mockgen -source internal/pkg/store/store.go -destination internal/pkg/mocks/mock_store.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aleffnull/shortener/internal/pkg/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CheckAvailability mocks base method.
func (m *MockStore) CheckAvailability(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvailability", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAvailability indicates an expected call of CheckAvailability.
func (mr *MockStoreMockRecorder) CheckAvailability(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailability", reflect.TypeOf((*MockStore)(nil).CheckAvailability), arg0)
}

// DeleteBatch mocks base method.
func (m *MockStore) DeleteBatch(arg0 context.Context, arg1 []string, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockStoreMockRecorder) DeleteBatch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockStore)(nil).DeleteBatch), arg0, arg1, arg2)
}

// Init mocks base method.
func (m *MockStore) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStoreMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStore)(nil).Init))
}

// Load mocks base method.
func (m *MockStore) Load(arg0 context.Context, arg1 string) (*models.URLItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].(*models.URLItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockStoreMockRecorder) Load(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStore)(nil).Load), arg0, arg1)
}

// LoadAllByUserID mocks base method.
func (m *MockStore) LoadAllByUserID(arg0 context.Context, arg1 uuid.UUID) ([]*models.KeyOriginalURLItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*models.KeyOriginalURLItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllByUserID indicates an expected call of LoadAllByUserID.
func (mr *MockStoreMockRecorder) LoadAllByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllByUserID", reflect.TypeOf((*MockStore)(nil).LoadAllByUserID), arg0, arg1)
}

// Save mocks base method.
func (m *MockStore) Save(arg0 context.Context, arg1 string, arg2 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockStoreMockRecorder) Save(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStore)(nil).Save), arg0, arg1, arg2)
}

// SaveBatch mocks base method.
func (m *MockStore) SaveBatch(arg0 context.Context, arg1 []*models.BatchRequestItem, arg2 uuid.UUID) ([]*models.BatchResponseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.BatchResponseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockStoreMockRecorder) SaveBatch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockStore)(nil).SaveBatch), arg0, arg1, arg2)
}

// Shutdown mocks base method.
func (m *MockStore) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockStoreMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockStore)(nil).Shutdown))
}

// MockColdStore is a mock of ColdStore interface.
type MockColdStore struct {
	ctrl     *gomock.Controller
	recorder *MockColdStoreMockRecorder
	isgomock struct{}
}

// MockColdStoreMockRecorder is the mock recorder for MockColdStore.
type MockColdStoreMockRecorder struct {
	mock *MockColdStore
}

// NewMockColdStore creates a new mock instance.
func NewMockColdStore(ctrl *gomock.Controller) *MockColdStore {
	mock := &MockColdStore{ctrl: ctrl}
	mock.recorder = &MockColdStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColdStore) EXPECT() *MockColdStoreMockRecorder {
	return m.recorder
}

// LoadAll mocks base method.
func (m *MockColdStore) LoadAll() ([]*models.ColdStoreEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAll")
	ret0, _ := ret[0].([]*models.ColdStoreEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAll indicates an expected call of LoadAll.
func (mr *MockColdStoreMockRecorder) LoadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAll", reflect.TypeOf((*MockColdStore)(nil).LoadAll))
}

// Save mocks base method.
func (m *MockColdStore) Save(arg0 *models.ColdStoreEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockColdStoreMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockColdStore)(nil).Save), arg0)
}
